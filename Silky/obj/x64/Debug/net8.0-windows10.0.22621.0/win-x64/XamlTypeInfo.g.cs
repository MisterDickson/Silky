//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Silky
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        private global::Silky.Silky_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Silky.Silky_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::Silky.Silky_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace Silky.Silky_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Silky.Silky_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::Silky.Silky_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::Silky.Silky_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Silky.Silky_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Silky.Silky_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[40];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "Microsoft.UI.Xaml.Controls.DropDownButton";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Controls.Button";
            _typeNameTable[6] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[7] = "Silky.MainPage";
            _typeNameTable[8] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[9] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[10] = "Microsoft.UI.Xaml.Media.MicaBackdrop";
            _typeNameTable[11] = "Microsoft.UI.Xaml.Media.SystemBackdrop";
            _typeNameTable[12] = "Microsoft.UI.Composition.SystemBackdrops.MicaKind";
            _typeNameTable[13] = "System.Enum";
            _typeNameTable[14] = "System.ValueType";
            _typeNameTable[15] = "Silky.MainWindow";
            _typeNameTable[16] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[17] = "Microsoft.UI.Xaml.Controls.ScrollView";
            _typeNameTable[18] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[19] = "Microsoft.UI.Xaml.UIElement";
            _typeNameTable[20] = "Microsoft.UI.Xaml.Visibility";
            _typeNameTable[21] = "Microsoft.UI.Xaml.Controls.ScrollingScrollMode";
            _typeNameTable[22] = "Microsoft.UI.Xaml.Controls.ScrollingContentOrientation";
            _typeNameTable[23] = "Microsoft.UI.Composition.CompositionPropertySet";
            _typeNameTable[24] = "Microsoft.UI.Composition.CompositionObject";
            _typeNameTable[25] = "Double";
            _typeNameTable[26] = "Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility";
            _typeNameTable[27] = "Microsoft.UI.Xaml.Controls.ScrollingChainMode";
            _typeNameTable[28] = "Microsoft.UI.Xaml.Controls.ScrollingRailMode";
            _typeNameTable[29] = "Microsoft.UI.Xaml.Controls.ScrollingInputKinds";
            _typeNameTable[30] = "Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter";
            _typeNameTable[31] = "Microsoft.UI.Xaml.FrameworkElement";
            _typeNameTable[32] = "Microsoft.UI.Xaml.Controls.ScrollingInteractionState";
            _typeNameTable[33] = "Single";
            _typeNameTable[34] = "Microsoft.UI.Xaml.Controls.ScrollingZoomMode";
            _typeNameTable[35] = "Silky.SaveDialog";
            _typeNameTable[36] = "Microsoft.UI.Xaml.Controls.TreeViewNode";
            _typeNameTable[37] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[38] = "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>";
            _typeNameTable[39] = "Int32";

            _typeTable = new global::System.Type[40];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::Microsoft.UI.Xaml.Controls.DropDownButton);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Controls.Button);
            _typeTable[6] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[7] = typeof(global::Silky.MainPage);
            _typeTable[8] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[9] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[10] = typeof(global::Microsoft.UI.Xaml.Media.MicaBackdrop);
            _typeTable[11] = typeof(global::Microsoft.UI.Xaml.Media.SystemBackdrop);
            _typeTable[12] = typeof(global::Microsoft.UI.Composition.SystemBackdrops.MicaKind);
            _typeTable[13] = typeof(global::System.Enum);
            _typeTable[14] = typeof(global::System.ValueType);
            _typeTable[15] = typeof(global::Silky.MainWindow);
            _typeTable[16] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[17] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollView);
            _typeTable[18] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[19] = typeof(global::Microsoft.UI.Xaml.UIElement);
            _typeTable[20] = typeof(global::Microsoft.UI.Xaml.Visibility);
            _typeTable[21] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode);
            _typeTable[22] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation);
            _typeTable[23] = typeof(global::Microsoft.UI.Composition.CompositionPropertySet);
            _typeTable[24] = typeof(global::Microsoft.UI.Composition.CompositionObject);
            _typeTable[25] = typeof(global::System.Double);
            _typeTable[26] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility);
            _typeTable[27] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingChainMode);
            _typeTable[28] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingRailMode);
            _typeTable[29] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds);
            _typeTable[30] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter);
            _typeTable[31] = typeof(global::Microsoft.UI.Xaml.FrameworkElement);
            _typeTable[32] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState);
            _typeTable[33] = typeof(global::System.Single);
            _typeTable[34] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode);
            _typeTable[35] = typeof(global::Silky.SaveDialog);
            _typeTable[36] = typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode);
            _typeTable[37] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[38] = typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>);
            _typeTable[39] = typeof(global::System.Int32);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_DropDownButton() { return new global::Microsoft.UI.Xaml.Controls.DropDownButton(); }
        private object Activate_7_MainPage() { return new global::Silky.MainPage(); }
        private object Activate_10_MicaBackdrop() { return new global::Microsoft.UI.Xaml.Media.MicaBackdrop(); }
        private object Activate_15_MainWindow() { return new global::Silky.MainWindow(); }
        private object Activate_17_ScrollView() { return new global::Microsoft.UI.Xaml.Controls.ScrollView(); }
        private object Activate_30_ScrollPresenter() { return new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter(); }
        private object Activate_35_SaveDialog() { return new global::Silky.SaveDialog(); }
        private object Activate_36_TreeViewNode() { return new global::Microsoft.UI.Xaml.Controls.TreeViewNode(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_38_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TreeViewNode>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Silky.Silky_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Microsoft.UI.Xaml.Controls.DropDownButton
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_4_DropDownButton;
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Controls.Button
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Silky.MainPage
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_7_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Microsoft.UI.Xaml.Media.MicaBackdrop
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Media.SystemBackdrop"));
                userType.Activator = Activate_10_MicaBackdrop;
                userType.AddMemberName("Kind");
                xamlType = userType;
                break;

            case 11:   //  Microsoft.UI.Xaml.Media.SystemBackdrop
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Microsoft.UI.Composition.SystemBackdrops.MicaKind
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Base", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.Base);
                userType.AddEnumValue("BaseAlt", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.BaseAlt);
                xamlType = userType;
                break;

            case 13:   //  System.Enum
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 14:   //  System.ValueType
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 15:   //  Silky.MainWindow
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_15_MainWindow;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Microsoft.UI.Xaml.Controls.ScrollView
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_17_ScrollView;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.ScrollView.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("ComputedHorizontalScrollBarVisibility");
                userType.AddMemberName("ComputedHorizontalScrollMode");
                userType.AddMemberName("ComputedVerticalScrollBarVisibility");
                userType.AddMemberName("ComputedVerticalScrollMode");
                userType.AddMemberName("ContentOrientation");
                userType.AddMemberName("CurrentAnchor");
                userType.AddMemberName("ExpressionAnimationSources");
                userType.AddMemberName("ExtentHeight");
                userType.AddMemberName("ExtentWidth");
                userType.AddMemberName("HorizontalAnchorRatio");
                userType.AddMemberName("HorizontalOffset");
                userType.AddMemberName("HorizontalScrollBarVisibility");
                userType.AddMemberName("HorizontalScrollChainMode");
                userType.AddMemberName("HorizontalScrollMode");
                userType.AddMemberName("HorizontalScrollRailMode");
                userType.AddMemberName("IgnoredInputKinds");
                userType.AddMemberName("MaxZoomFactor");
                userType.AddMemberName("MinZoomFactor");
                userType.AddMemberName("ScrollPresenter");
                userType.AddMemberName("ScrollableHeight");
                userType.AddMemberName("ScrollableWidth");
                userType.AddMemberName("State");
                userType.AddMemberName("VerticalAnchorRatio");
                userType.AddMemberName("VerticalOffset");
                userType.AddMemberName("VerticalScrollBarVisibility");
                userType.AddMemberName("VerticalScrollChainMode");
                userType.AddMemberName("VerticalScrollMode");
                userType.AddMemberName("VerticalScrollRailMode");
                userType.AddMemberName("ViewportHeight");
                userType.AddMemberName("ViewportWidth");
                userType.AddMemberName("ZoomChainMode");
                userType.AddMemberName("ZoomFactor");
                userType.AddMemberName("ZoomMode");
                xamlType = userType;
                break;

            case 18:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Microsoft.UI.Xaml.UIElement
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Microsoft.UI.Xaml.Visibility
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Microsoft.UI.Xaml.Controls.ScrollingScrollMode
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode.Enabled);
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode.Disabled);
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode.Auto);
                xamlType = userType;
                break;

            case 22:   //  Microsoft.UI.Xaml.Controls.ScrollingContentOrientation
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Vertical", global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation.Vertical);
                userType.AddEnumValue("Horizontal", global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation.Horizontal);
                userType.AddEnumValue("None", global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation.None);
                userType.AddEnumValue("Both", global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation.Both);
                xamlType = userType;
                break;

            case 23:   //  Microsoft.UI.Composition.CompositionPropertySet
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Composition.CompositionObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  Microsoft.UI.Composition.CompositionObject
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 25:   //  Double
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility.Auto);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility.Visible);
                userType.AddEnumValue("Hidden", global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility.Hidden);
                xamlType = userType;
                break;

            case 27:   //  Microsoft.UI.Xaml.Controls.ScrollingChainMode
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.ScrollingChainMode.Auto);
                userType.AddEnumValue("Always", global::Microsoft.UI.Xaml.Controls.ScrollingChainMode.Always);
                userType.AddEnumValue("Never", global::Microsoft.UI.Xaml.Controls.ScrollingChainMode.Never);
                xamlType = userType;
                break;

            case 28:   //  Microsoft.UI.Xaml.Controls.ScrollingRailMode
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.ScrollingRailMode.Enabled);
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.ScrollingRailMode.Disabled);
                xamlType = userType;
                break;

            case 29:   //  Microsoft.UI.Xaml.Controls.ScrollingInputKinds
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.None);
                userType.AddEnumValue("Touch", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.Touch);
                userType.AddEnumValue("Pen", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.Pen);
                userType.AddEnumValue("MouseWheel", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.MouseWheel);
                userType.AddEnumValue("Keyboard", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.Keyboard);
                userType.AddEnumValue("Gamepad", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.Gamepad);
                userType.AddEnumValue("All", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.All);
                xamlType = userType;
                break;

            case 30:   //  Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.FrameworkElement"));
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter.Content");
                userType.AddMemberName("Content");
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 31:   //  Microsoft.UI.Xaml.FrameworkElement
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Microsoft.UI.Xaml.Controls.ScrollingInteractionState
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Idle", global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState.Idle);
                userType.AddEnumValue("Interaction", global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState.Interaction);
                userType.AddEnumValue("Inertia", global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState.Inertia);
                userType.AddEnumValue("Animation", global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState.Animation);
                xamlType = userType;
                break;

            case 33:   //  Single
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  Microsoft.UI.Xaml.Controls.ScrollingZoomMode
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode.Enabled);
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode.Disabled);
                xamlType = userType;
                break;

            case 35:   //  Silky.SaveDialog
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_SaveDialog;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Microsoft.UI.Xaml.Controls.TreeViewNode
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_36_TreeViewNode;
                userType.AddMemberName("Children");
                userType.AddMemberName("Content");
                userType.AddMemberName("Depth");
                userType.AddMemberName("HasChildren");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Parent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 37:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
                userType = new global::Silky.Silky_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_38_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  Int32
                xamlType = new global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_MicaBackdrop_Kind(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            return that.Kind;
        }
        private void set_1_MicaBackdrop_Kind(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            that.Kind = (global::Microsoft.UI.Composition.SystemBackdrops.MicaKind)Value;
        }
        private object get_2_ScrollView_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.Content;
        }
        private void set_2_ScrollView_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.Content = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_3_ScrollView_ComputedHorizontalScrollBarVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ComputedHorizontalScrollBarVisibility;
        }
        private object get_4_ScrollView_ComputedHorizontalScrollMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ComputedHorizontalScrollMode;
        }
        private object get_5_ScrollView_ComputedVerticalScrollBarVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ComputedVerticalScrollBarVisibility;
        }
        private object get_6_ScrollView_ComputedVerticalScrollMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ComputedVerticalScrollMode;
        }
        private object get_7_ScrollView_ContentOrientation(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ContentOrientation;
        }
        private void set_7_ScrollView_ContentOrientation(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.ContentOrientation = (global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation)Value;
        }
        private object get_8_ScrollView_CurrentAnchor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.CurrentAnchor;
        }
        private object get_9_ScrollView_ExpressionAnimationSources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ExpressionAnimationSources;
        }
        private object get_10_ScrollView_ExtentHeight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ExtentHeight;
        }
        private object get_11_ScrollView_ExtentWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ExtentWidth;
        }
        private object get_12_ScrollView_HorizontalAnchorRatio(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalAnchorRatio;
        }
        private void set_12_ScrollView_HorizontalAnchorRatio(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.HorizontalAnchorRatio = (global::System.Double)Value;
        }
        private object get_13_ScrollView_HorizontalOffset(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalOffset;
        }
        private object get_14_ScrollView_HorizontalScrollBarVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalScrollBarVisibility;
        }
        private void set_14_ScrollView_HorizontalScrollBarVisibility(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.HorizontalScrollBarVisibility = (global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility)Value;
        }
        private object get_15_ScrollView_HorizontalScrollChainMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalScrollChainMode;
        }
        private void set_15_ScrollView_HorizontalScrollChainMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.HorizontalScrollChainMode = (global::Microsoft.UI.Xaml.Controls.ScrollingChainMode)Value;
        }
        private object get_16_ScrollView_HorizontalScrollMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalScrollMode;
        }
        private void set_16_ScrollView_HorizontalScrollMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.HorizontalScrollMode = (global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode)Value;
        }
        private object get_17_ScrollView_HorizontalScrollRailMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalScrollRailMode;
        }
        private void set_17_ScrollView_HorizontalScrollRailMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.HorizontalScrollRailMode = (global::Microsoft.UI.Xaml.Controls.ScrollingRailMode)Value;
        }
        private object get_18_ScrollView_IgnoredInputKinds(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.IgnoredInputKinds;
        }
        private void set_18_ScrollView_IgnoredInputKinds(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.IgnoredInputKinds = (global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds)Value;
        }
        private object get_19_ScrollView_MaxZoomFactor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.MaxZoomFactor;
        }
        private void set_19_ScrollView_MaxZoomFactor(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.MaxZoomFactor = (global::System.Double)Value;
        }
        private object get_20_ScrollView_MinZoomFactor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.MinZoomFactor;
        }
        private void set_20_ScrollView_MinZoomFactor(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.MinZoomFactor = (global::System.Double)Value;
        }
        private object get_21_ScrollView_ScrollPresenter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ScrollPresenter;
        }
        private object get_22_ScrollPresenter_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter)instance;
            return that.Content;
        }
        private void set_22_ScrollPresenter_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter)instance;
            that.Content = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_23_ScrollView_ScrollableHeight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ScrollableHeight;
        }
        private object get_24_ScrollView_ScrollableWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ScrollableWidth;
        }
        private object get_25_ScrollView_State(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.State;
        }
        private object get_26_ScrollView_VerticalAnchorRatio(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalAnchorRatio;
        }
        private void set_26_ScrollView_VerticalAnchorRatio(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.VerticalAnchorRatio = (global::System.Double)Value;
        }
        private object get_27_ScrollView_VerticalOffset(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalOffset;
        }
        private object get_28_ScrollView_VerticalScrollBarVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalScrollBarVisibility;
        }
        private void set_28_ScrollView_VerticalScrollBarVisibility(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.VerticalScrollBarVisibility = (global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility)Value;
        }
        private object get_29_ScrollView_VerticalScrollChainMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalScrollChainMode;
        }
        private void set_29_ScrollView_VerticalScrollChainMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.VerticalScrollChainMode = (global::Microsoft.UI.Xaml.Controls.ScrollingChainMode)Value;
        }
        private object get_30_ScrollView_VerticalScrollMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalScrollMode;
        }
        private void set_30_ScrollView_VerticalScrollMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.VerticalScrollMode = (global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode)Value;
        }
        private object get_31_ScrollView_VerticalScrollRailMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalScrollRailMode;
        }
        private void set_31_ScrollView_VerticalScrollRailMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.VerticalScrollRailMode = (global::Microsoft.UI.Xaml.Controls.ScrollingRailMode)Value;
        }
        private object get_32_ScrollView_ViewportHeight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ViewportHeight;
        }
        private object get_33_ScrollView_ViewportWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ViewportWidth;
        }
        private object get_34_ScrollView_ZoomChainMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ZoomChainMode;
        }
        private void set_34_ScrollView_ZoomChainMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.ZoomChainMode = (global::Microsoft.UI.Xaml.Controls.ScrollingChainMode)Value;
        }
        private object get_35_ScrollView_ZoomFactor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ZoomFactor;
        }
        private object get_36_ScrollView_ZoomMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ZoomMode;
        }
        private void set_36_ScrollView_ZoomMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.ZoomMode = (global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode)Value;
        }
        private object get_37_TreeViewNode_Children(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Children;
        }
        private object get_38_TreeViewNode_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Content;
        }
        private void set_38_TreeViewNode_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_39_TreeViewNode_Depth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Depth;
        }
        private object get_40_TreeViewNode_HasChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasChildren;
        }
        private object get_41_TreeViewNode_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_41_TreeViewNode_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_42_TreeViewNode_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.IsExpanded;
        }
        private void set_42_TreeViewNode_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_43_TreeViewNode_Parent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Parent;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Silky.Silky_XamlTypeInfo.XamlMember xamlMember = null;
            global::Silky.Silky_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "Microsoft.UI.Xaml.Media.MicaBackdrop.Kind":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Media.MicaBackdrop");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "Kind", "Microsoft.UI.Composition.SystemBackdrops.MicaKind");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_MicaBackdrop_Kind;
                xamlMember.Setter = set_1_MicaBackdrop_Kind;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.Content":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "Content", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_ScrollView_Content;
                xamlMember.Setter = set_2_ScrollView_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ComputedHorizontalScrollBarVisibility":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ComputedHorizontalScrollBarVisibility", "Microsoft.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_ScrollView_ComputedHorizontalScrollBarVisibility;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ComputedHorizontalScrollMode":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ComputedHorizontalScrollMode", "Microsoft.UI.Xaml.Controls.ScrollingScrollMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_ScrollView_ComputedHorizontalScrollMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ComputedVerticalScrollBarVisibility":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ComputedVerticalScrollBarVisibility", "Microsoft.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_ScrollView_ComputedVerticalScrollBarVisibility;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ComputedVerticalScrollMode":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ComputedVerticalScrollMode", "Microsoft.UI.Xaml.Controls.ScrollingScrollMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_ScrollView_ComputedVerticalScrollMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ContentOrientation":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ContentOrientation", "Microsoft.UI.Xaml.Controls.ScrollingContentOrientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_ScrollView_ContentOrientation;
                xamlMember.Setter = set_7_ScrollView_ContentOrientation;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.CurrentAnchor":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "CurrentAnchor", "Microsoft.UI.Xaml.UIElement");
                xamlMember.Getter = get_8_ScrollView_CurrentAnchor;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ExpressionAnimationSources":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ExpressionAnimationSources", "Microsoft.UI.Composition.CompositionPropertySet");
                xamlMember.Getter = get_9_ScrollView_ExpressionAnimationSources;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ExtentHeight":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ExtentHeight", "Double");
                xamlMember.Getter = get_10_ScrollView_ExtentHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ExtentWidth":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ExtentWidth", "Double");
                xamlMember.Getter = get_11_ScrollView_ExtentWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalAnchorRatio":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "HorizontalAnchorRatio", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_ScrollView_HorizontalAnchorRatio;
                xamlMember.Setter = set_12_ScrollView_HorizontalAnchorRatio;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalOffset":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "HorizontalOffset", "Double");
                xamlMember.Getter = get_13_ScrollView_HorizontalOffset;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalScrollBarVisibility":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "HorizontalScrollBarVisibility", "Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_ScrollView_HorizontalScrollBarVisibility;
                xamlMember.Setter = set_14_ScrollView_HorizontalScrollBarVisibility;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalScrollChainMode":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "HorizontalScrollChainMode", "Microsoft.UI.Xaml.Controls.ScrollingChainMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_ScrollView_HorizontalScrollChainMode;
                xamlMember.Setter = set_15_ScrollView_HorizontalScrollChainMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalScrollMode":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "HorizontalScrollMode", "Microsoft.UI.Xaml.Controls.ScrollingScrollMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_ScrollView_HorizontalScrollMode;
                xamlMember.Setter = set_16_ScrollView_HorizontalScrollMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalScrollRailMode":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "HorizontalScrollRailMode", "Microsoft.UI.Xaml.Controls.ScrollingRailMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_ScrollView_HorizontalScrollRailMode;
                xamlMember.Setter = set_17_ScrollView_HorizontalScrollRailMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.IgnoredInputKinds":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "IgnoredInputKinds", "Microsoft.UI.Xaml.Controls.ScrollingInputKinds");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_ScrollView_IgnoredInputKinds;
                xamlMember.Setter = set_18_ScrollView_IgnoredInputKinds;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.MaxZoomFactor":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "MaxZoomFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_ScrollView_MaxZoomFactor;
                xamlMember.Setter = set_19_ScrollView_MaxZoomFactor;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.MinZoomFactor":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "MinZoomFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_ScrollView_MinZoomFactor;
                xamlMember.Setter = set_20_ScrollView_MinZoomFactor;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ScrollPresenter":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ScrollPresenter", "Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_ScrollView_ScrollPresenter;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter.Content":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "Content", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_ScrollPresenter_Content;
                xamlMember.Setter = set_22_ScrollPresenter_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ScrollableHeight":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ScrollableHeight", "Double");
                xamlMember.Getter = get_23_ScrollView_ScrollableHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ScrollableWidth":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ScrollableWidth", "Double");
                xamlMember.Getter = get_24_ScrollView_ScrollableWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.State":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "State", "Microsoft.UI.Xaml.Controls.ScrollingInteractionState");
                xamlMember.Getter = get_25_ScrollView_State;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalAnchorRatio":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "VerticalAnchorRatio", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_ScrollView_VerticalAnchorRatio;
                xamlMember.Setter = set_26_ScrollView_VerticalAnchorRatio;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalOffset":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "VerticalOffset", "Double");
                xamlMember.Getter = get_27_ScrollView_VerticalOffset;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalScrollBarVisibility":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "VerticalScrollBarVisibility", "Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_ScrollView_VerticalScrollBarVisibility;
                xamlMember.Setter = set_28_ScrollView_VerticalScrollBarVisibility;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalScrollChainMode":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "VerticalScrollChainMode", "Microsoft.UI.Xaml.Controls.ScrollingChainMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_ScrollView_VerticalScrollChainMode;
                xamlMember.Setter = set_29_ScrollView_VerticalScrollChainMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalScrollMode":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "VerticalScrollMode", "Microsoft.UI.Xaml.Controls.ScrollingScrollMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_ScrollView_VerticalScrollMode;
                xamlMember.Setter = set_30_ScrollView_VerticalScrollMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalScrollRailMode":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "VerticalScrollRailMode", "Microsoft.UI.Xaml.Controls.ScrollingRailMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_ScrollView_VerticalScrollRailMode;
                xamlMember.Setter = set_31_ScrollView_VerticalScrollRailMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ViewportHeight":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ViewportHeight", "Double");
                xamlMember.Getter = get_32_ScrollView_ViewportHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ViewportWidth":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ViewportWidth", "Double");
                xamlMember.Getter = get_33_ScrollView_ViewportWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ZoomChainMode":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ZoomChainMode", "Microsoft.UI.Xaml.Controls.ScrollingChainMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_ScrollView_ZoomChainMode;
                xamlMember.Setter = set_34_ScrollView_ZoomChainMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ZoomFactor":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ZoomFactor", "Single");
                xamlMember.Getter = get_35_ScrollView_ZoomFactor;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ZoomMode":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "ZoomMode", "Microsoft.UI.Xaml.Controls.ScrollingZoomMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_ScrollView_ZoomMode;
                xamlMember.Setter = set_36_ScrollView_ZoomMode;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Children":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "Children", "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>");
                xamlMember.Getter = get_37_TreeViewNode_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Content":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_TreeViewNode_Content;
                xamlMember.Setter = set_38_TreeViewNode_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Depth":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "Depth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_TreeViewNode_Depth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "HasChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_TreeViewNode_HasChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.Getter = get_41_TreeViewNode_HasUnrealizedChildren;
                xamlMember.Setter = set_41_TreeViewNode_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_TreeViewNode_IsExpanded;
                xamlMember.Setter = set_42_TreeViewNode_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Parent":
                userType = (global::Silky.Silky_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Silky.Silky_XamlTypeInfo.XamlMember(this, "Parent", "Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember.Getter = get_43_TreeViewNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Silky.Silky_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::Silky.Silky_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Silky.Silky_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2406")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::Silky.Silky_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Silky.Silky_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

